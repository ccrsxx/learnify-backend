openapi: 3.0.3
info:
  title: MOOC - Final Project Fullstack Web and Android
  description: |-
    A website and mobile-based Massive Open Online Courses (MOOC) application

    ## How to authenticate

    1. Login with email and password on [this](#/auth/login) endpoint with any of the available users above.
    1. Copy the token from the response.
    1. Click the `Authorize` button on the top right corner of this page.
    1. Paste the token inside the `value` field and click `Authorize` button. Don't forget to add `Bearer ` prefix before the token.
  version: 1.0.0
  license:
    name: Production Server
    url: https://api.belajar.risalamin.com
externalDocs:
  description: GitHub Repository
  url: https://github.com/ccrsxx/binar-backend
servers:
  - url: https://api.belajar.risalamin.com
    description: Production server
  - url: http://localhost:3000
    description: Local server
tags:
  - name: index
    description: Everything about index
  - name: auth
    description: Everything about auth
  - name: users
    description: Everything about user
  - name: courses
    description: Everything about courses
  - name: dashboard
    description: Everything about dashboard
  - name: course-categories
    description: Everything about course categories
  - name: course-material-status
    description: Everything about course material status
  - name: user-payments
    description: Everything about user-payments
paths:
  /:
    get:
      tags:
        - index
      summary: Welcome to API
      description: Returns a welcome message and docs url
      operationId: index
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ping successfully
                  docs:
                    type: string
                    example: http://api.belajar.risalamin.com/docs
  /auth/login:
    post:
      tags:
        - auth
      summary: Login user as an member
      description: Login with email / phone number and password
      operationId: login
      requestBody:
        description: Login as member user
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UserCredentialsWithEmail'
                - $ref: '#/components/schemas/UserCredentialsWithPhoneNumber'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successfully
                  data:
                    allOf:
                      - $ref: '#/components/schemas/User'
                      - type: object
                        properties:
                          token:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImZiOWRlNThjLTIzNTctNDdhOS1iNWU1LWMzM2IwNWE4MzE2NiIsImlhdCI6MTY5Nzk4NjI0OCwiZXhwIjoxNjk4MDcyNjQ4fQ.AeyJQD5-VFCsue5gtwelyTrKKile_zpk1EOCJoarQxY
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/MissingCredentialsError'
                  - $ref: '#/components/schemas/InvalidCredentialsError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordIsNotMatchError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/login/admin:
    post:
      tags:
        - auth
      summary: Login user as an admin
      description: Login with email / phone number and password
      operationId: login-admin
      requestBody:
        description: Login as admin user
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UserAdminCredentialsWithEmail'
                - $ref: '#/components/schemas/UserAdminCredentialsWithPhoneNumber'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successfully
                  data:
                    allOf:
                      - $ref: '#/components/schemas/AdminUser'
                      - type: object
                        properties:
                          token:
                            type: string
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImZiOWRlNThjLTIzNTctNDdhOS1iNWU1LWMzM2IwNWE4MzE2NiIsImlhdCI6MTY5Nzk4NjI0OCwiZXhwIjoxNjk4MDcyNjQ4fQ.AeyJQD5-VFCsue5gtwelyTrKKile_zpk1EOCJoarQxY
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/MissingCredentialsError'
                  - $ref: '#/components/schemas/InvalidCredentialsError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordIsNotMatchError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: Register a new user
      operationId: register
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/me:
    get:
      tags:
        - users
      summary: Get current user
      description: Get current user
      operationId: user
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AuthenticatedUser'
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
    put:
      tags:
        - users
      summary: Update user
      description: Update user
      operationId: update-user
      requestBody:
        description: The user object to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditableUser'

        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User profile updated successfully
                  data:
                    allOf:
                      - $ref: '#/components/schemas/UpdatedUser'
                      - type: object
                        properties:
                          name:
                            type: string
                            example: Emilia
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
  /courses:
    get:
      tags:
        - courses
      summary: Get all courses
      description: Get all courses
      operationId: courses
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
    post:
      tags:
        - courses
      summary: Create a new course
      description: Create a new course
      operationId: create-courses
      requestBody:
        description: Create a new course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Course created successfully
                  data:
                    $ref: '#/components/schemas/NewCourse'
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
  /courses/:
    get:
      tags:
        - courses
      summary: Get course by query params
      description: Get course by query params
      operationId: courses-by-query
      parameters:
        - in: query
          name: type
          required: false
          description: Type of course (select one)
          schema:
            type: string
            example: all,premium,free
        - in: query
          name: filter
          required: false
          description: Filter of the course (select one or more)
          schema:
            type: string
            example: new,popular,promo
        - in: query
          name: category
          required: false
          description: Category of the course (select one or more)
          schema:
            type: string
            example: Web Development,Android Development
        - in: query
          name: difficulty
          required: false
          description: Difficulty of the course (select one or more)
          schema:
            type: string
            example: all,beginner,intermediate,advanced
        - in: query
          name: search
          required: false
          description: Course by search (free text)
          schema:
            type: string
            example: sql for beginner
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CourseByQueryParams'
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
  /courses/me:
    get:
      tags:
        - courses
      summary: Get user courses
      description: Get user courses
      operationId: my-courses
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CourseWithCompletedMaterials'
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
  /courses/{id}:
    get:
      tags:
        - courses
      summary: Get course data by ID
      description: Get course data by ID
      operationId: courses-data
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The Course ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/CourseDetails'
                      - $ref: '#/components/schemas/CourseDetailsWithMaterialStatus'
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
    put:
      tags:
        - courses
      summary: Update course by ID
      description: Update course by ID
      operationId: update-courses
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The Course ID
      requestBody:
        description: Update course
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Something else
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Course updated successfully
                  data:
                    $ref: '#/components/schemas/NewCourse'
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
    delete:
      tags:
        - courses
      summary: Delete course by ID
      description: Delete course by ID
      operationId: delete-courses
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The Course ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delete'
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
  /course-categories:
    get:
      tags:
        - course-categories
      summary: Get all course category
      description: Get all course category
      operationId: course-categories
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CourseCategory'
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
  /course-material-status/{id}:
    put:
      tags:
        - course-material-status
      summary: Update course material status by ID
      description: Update completed progress on course material status
      operationId: update-course-material-status
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The Course material status ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Course material status updated successfully
                  data:
                    $ref: '#/components/schemas/CourseMaterialStatus'
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
  /dashboard/statistics:
    get:
      tags:
        - dashboard
      summary: Get statistics for dashboard
      description: Get total user, total course, and premium course
      operationId: getStatistics
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Statistic'
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '403':
          $ref: '#/components/responses/AdminError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
  /user-payments:
    get:
      tags:
        - user-payments
      summary: Get all user payments
      description: Get all user payments
      operationId: user-payments
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payments'
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '403':
          $ref: '#/components/responses/AdminError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
    post:
      tags:
        - user-payments
      summary: Create a payment
      description: Create a payment
      operationId: create-payment
      requestBody:
        description: Create a new payment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentBody'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    oneOf:
                      - example: Payment created successfully
                      - example: Payment already exist and not expired yet
                  data:
                    $ref: '#/components/schemas/NewPayment'
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '404':
          $ref: '#/components/responses/CourseNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
  /user-payments/{id}:
    get:
      tags:
        - user-payments
      summary: Get payment data by ID
      description: Get payment data by ID
      operationId: payment-data
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The User Payment ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Payments'
        '400':
          $ref: '#/components/responses/MissingAuthorizationError'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '404':
          $ref: '#/components/responses/PaymentNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
    put:
      tags:
        - user-payments
      summary: Update payment status completed by ID
      description: Update payment status completed by ID
      operationId: update-payment-status
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The User Payment ID
      requestBody:
        description: Update status to completed
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_method:
                  example: BANK_TRANSFER
                  enum:
                    - CREDIT_CARD
                    - BANK_TRANSFER
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Payment successfully updated
                  data:
                    $ref: '#/components/schemas/UpdatedPayment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/MissingAuthorizationError'
                  - $ref: '#/components/schemas/PaymentMethodNotNull'
        '401':
          $ref: '#/components/responses/InvalidAuthorizationError'
        '404':
          $ref: '#/components/responses/PaymentNotFound'
        '422':
          description: Unprocessable Content
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CourseAlreadyEnrolledError'
                  - $ref: '#/components/schemas/PaymentAlreadyCompleted'
                  - $ref: '#/components/schemas/PaymentExpired'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - token: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Satella
        admin:
          type: boolean
          example: false
        email:
          type: string
          example: satella@rezero.com
        phone_number:
          type: string
          example: '+6287852075425'
        password:
          type: string
          example: $2b$10$m9qQtOm.ilSASXlPIdVaROsO4ExZAs9NQZvZUx7bG7OZqGScy3JMm
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
    AdminUser:
      type: object
      properties:
        id:
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Emilia
        admin:
          type: boolean
          example: true
        email:
          type: string
          example: emilia@rezero.com
        phone_number:
          type: string
          example: '+6287852075425'
        password:
          type: string
          example: $2b$10$m9qQtOm.ilSASXlPIdVaROsO4ExZAs9NQZvZUx7bG7OZqGScy3JMm
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
    AuthenticatedUser:
      type: object
      properties:
        id:
          type: string
          example: 68a58152-8b12-449f-9eae-ec3485941bad
        name:
          type: string
          example: Emilia
        admin:
          type: boolean
          example: true
        email:
          type: string
          example: emilia@rezero.com
        phone_number:
          type: string
          example: '+6287852075425'
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
    EditableUser:
      type: object
      properties:
        name:
          type: string
          example: Emilia
    CreatedUser:
      type: object
      properties:
        name:
          type: string
          example: Satella
        email:
          type: string
          example: satella@rezero.com
        password:
          type: string
          example: $2b$10$m9qQtOm.ilSASXlPIdVaROsO4ExZAs9NQZvZUx7bG7OZqGScy3JMm
        phone_number:
          type: string
          example: '+6287852075425'
    UpdatedUser:
      type: object
      properties:
        id:
          type: string
          example: 68a58152-8b12-449f-9eae-ec3485941bad
        name:
          type: string
          example: Emilia
        email:
          type: string
          example: emilia@rezero.com
        phone_number:
          type: string
          example: '+6287852075425'
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
    UserCredentialsWithEmail:
      type: object
      properties:
        email:
          type: string
          example: rem@rezero.com
        password:
          type: string
          example: rem-rezero
    UserCredentialsWithPhoneNumber:
      type: object
      properties:
        phone_number:
          type: string
          example: '+6281234567890'
        password:
          type: string
          example: rem-rezero
    UserAdminCredentialsWithEmail:
      type: object
      properties:
        email:
          type: string
          example: emilia@rezero.com
        password:
          type: string
          example: emilia-rezero
    UserAdminCredentialsWithPhoneNumber:
      type: object
      properties:
        phone_number:
          type: string
          example: '+6289876543210'
        password:
          type: string
          example: emilia-rezero
    Course:
      type: object
      properties:
        id:
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Web Development
        code:
          type: string
          example: ZQosLgGtzB
        price:
          type: integer
          example: 100000
        author:
          type: string
          example: Ronald
        image:
          type: string
          example: https://loremflickr.com/640/480/animals?lock=5129160257175552
        rating:
          type: integer
          example: 5
        premium:
          type: boolean
          example: false
        telegram:
          type: string
          example: https://random-site.com/tele-group
        difficulty:
          type: string
          example: INTERMEDIATE
          enum:
            - BEGINNER
            - INTERMEDIATE
            - ADVANCED
        description:
          type: string
          example: This course will help you become a great programmer
        intro_video:
          type: string
          example: https://random-site.com/random-video.mkv
        onboarding_text:
          type: string
          example: This course will help you become a great programmer
        target_audience:
          type: array
          items:
            type: string
          example:
            - You want to become a great programmer
            - You want to become a great programmer
            - You want to become a great programmer
        user_id:
          type: string
          example: c6e7c58b-d2a7-430c-b913-00b9bf09bf5e
        course_category_id:
          type: string
          example: 3bc509a0-923c-419d-8bcd-3e269289dc8e
        course_category:
          $ref: '#/components/schemas/CourseCategory'
        total_duration:
          type: integer
          example: 50
        total_materials:
          type: integer
          example: 3
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
    CourseWithCompletedMaterials:
      allOf:
        - $ref: '#/components/schemas/Course'
        - type: object
          properties:
            total_completed_materials:
              type: number
              example: 2
    NewCourse:
      type: object
      properties:
        id:
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Web Development
        code:
          type: string
          example: ZQosLgGtzB
        price:
          type: integer
          example: 100000
        author:
          type: string
          example: Ronald
        image:
          type: string
          example: https://loremflickr.com/640/480/animals?lock=5129160257175552
        rating:
          type: integer
          example: 5
        premium:
          type: boolean
          example: false
        telegram:
          type: string
          example: https://random-site.com/tele-group
        difficulty:
          type: string
          example: INTERMEDIATE
          enum:
            - BEGINNER
            - INTERMEDIATE
            - ADVANCED
        description:
          type: string
          example: This course will help you become a great programmer
        intro_video:
          type: string
          example: https://random-site.com/random-video.mkv
        onboarding_text:
          type: string
          example: This course will help you become a great programmer
        target_audience:
          type: array
          items:
            type: string
          example:
            - You want to become a great programmer
            - You want to become a great programmer
            - You want to become a great programmer
        user_id:
          type: string
          example: 68a58152-8b12-449f-9eae-ec3485941bad
        course_category_id:
          type: string
          example: 3bc509a0-923c-419d-8bcd-3e269289dc8e
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
    CourseDetails:
      type: object
      properties:
        id:
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Web Development
        code:
          type: string
          example: ZQosLgGtzB
        price:
          type: integer
          example: 100000
        author:
          type: string
          example: Ronald
        image:
          type: string
          example: https://loremflickr.com/640/480/animals?lock=5129160257175552
        rating:
          type: integer
          example: 5
        premium:
          type: boolean
          example: false
        telegram:
          type: string
          example: https://random-site.com/tele-group
        difficulty:
          type: string
          example: INTERMEDIATE
          enum:
            - BEGINNER
            - INTERMEDIATE
            - ADVANCED
        description:
          type: string
          example: This course will help you become a great programmer
        intro_video:
          type: string
          example: https://random-site.com/random-video.mkv
        onboarding_text:
          type: string
          example: This course will help you become a great programmer
        target_audience:
          type: array
          items:
            type: string
          example:
            - You want to become a great programmer
            - You want to become a great programmer
            - You want to become a great programmer
        user_id:
          type: string
          example: c6e7c58b-d2a7-430c-b913-00b9bf09bf5e
        course_category_id:
          type: string
          example: 3bc509a0-923c-419d-8bcd-3e269289dc8e
        course_category:
          $ref: '#/components/schemas/CourseCategory'
        course_chapter_id:
          type: string
          example: 3062d67c-e17a-46e5-9bcb-8c31045d8a74
        course_chapter:
          type: array
          items:
            type: object
            oneOf:
              - $ref: '#/components/schemas/CourseChapter'
              - $ref: '#/components/schemas/CourseChapter'
        total_duration:
          type: integer
          example: 55
        total_materials:
          type: integer
          example: 3
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
    CourseDetailsWithMaterialStatus:
      type: object
      properties:
        id:
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Web Development
        code:
          type: string
          example: ZQosLgGtzB
        price:
          type: integer
          example: 100000
        author:
          type: string
          example: Ronald
        image:
          type: string
          example: https://loremflickr.com/640/480/animals?lock=5129160257175552
        rating:
          type: integer
          example: 5
        premium:
          type: boolean
          example: false
        telegram:
          type: string
          example: https://random-site.com/tele-group
        difficulty:
          type: string
          example: INTERMEDIATE
          enum:
            - BEGINNER
            - INTERMEDIATE
            - ADVANCED
        description:
          type: string
          example: This course will help you become a great programmer
        intro_video:
          type: string
          example: https://random-site.com/random-video.mkv
        onboarding_text:
          type: string
          example: This course will help you become a great programmer
        target_audience:
          type: array
          items:
            type: string
          example:
            - You want to become a great programmer
            - You want to become a great programmer
            - You want to become a great programmer
        user_id:
          type: string
          example: c6e7c58b-d2a7-430c-b913-00b9bf09bf5e
        course_category_id:
          type: string
          example: 3bc509a0-923c-419d-8bcd-3e269289dc8e
        course_category:
          $ref: '#/components/schemas/CourseCategory'
        course_chapter_id:
          type: string
          example: 3062d67c-e17a-46e5-9bcb-8c31045d8a74
        course_chapter:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/CourseChapterWithStatus'
        total_duration:
          type: integer
          example: 55
        total_materials:
          type: integer
          example: 3
        total_completed_materials:
          type: integer
          example: 1
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
    CourseByQueryParams:
      type: object
      properties:
        id:
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Web Development
        code:
          type: string
          example: ZQosLgGtzB
        price:
          type: integer
          example: 100000
        author:
          type: string
          example: Ronald
        image:
          type: string
          example: https://loremflickr.com/640/480/animals?lock=5129160257175552
        rating:
          type: integer
          example: 5
        premium:
          type: boolean
          example: false
        telegram:
          type: string
          example: https://random-site.com/tele-group
        difficulty:
          type: string
          example: INTERMEDIATE
          enum:
            - BEGINNER
            - INTERMEDIATE
            - ADVANCED
        description:
          type: string
          example: This course will help you become a great programmer
        intro_video:
          type: string
          example: https://random-site.com/random-video.mkv
        onboarding_text:
          type: string
          example: This course will help you become a great programmer
        target_audience:
          type: array
          items:
            type: string
          example:
            - You want to become a great programmer
            - You want to become a great programmer
            - You want to become a great programmer
        user_id:
          type: string
          example: c6e7c58b-d2a7-430c-b913-00b9bf09bf5e
        user:
          $ref: '#/components/schemas/User'
        course_category_id:
          type: string
          example: 3bc509a0-923c-419d-8bcd-3e269289dc8e
        course_category:
          $ref: '#/components/schemas/CourseCategory'
        total_duration:
          type: integer
          example: 55
        total_materials:
          type: integer
          example: 3
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
    CourseChapter:
      type: object
      properties:
        id:
          type: string
          example: 3062d67c-e17a-46e5-9bcb-8c31045d8a74
        name:
          type: string
          example: Pengenalan Fullstack
        duration:
          type: integer
          example: 39
        order_index:
          type: integer
          example: 1
        course_id:
          type: string
          example: 5db0a017-6041-4d9a-8f44-5fca03d5378
        course_material_id:
          type: string
          example: 5db0a017-6041-4d9a-8f44-5fca03d5378
        course_material:
          type: array
          items:
            type: object
            oneOf:
              - $ref: '#/components/schemas/CourseMaterial'
              - $ref: '#/components/schemas/CourseMaterial'
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
    CourseChapterWithStatus:
      type: object
      properties:
        id:
          type: string
          example: 3062d67c-e17a-46e5-9bcb-8c31045d8a74
        name:
          type: string
          example: Pengenalan Fullstack
        duration:
          type: integer
          example: 39
        order_index:
          type: integer
          example: 1
        course_id:
          type: string
          example: 5db0a017-6041-4d9a-8f44-5fca03d5378
        course_material_id:
          type: string
          example: 5db0a017-6041-4d9a-8f44-5fca03d5378
        course_material:
          type: array
          items:
            type: object
            oneOf:
              - $ref: '#/components/schemas/CourseMaterialWithStatus'
              - $ref: '#/components/schemas/CourseMaterialWithStatus'
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
    CourseMaterial:
      type: object
      properties:
        id:
          type: string
          example: a34858de-4585-47f0-892c-3660ad3cc032
        name:
          type: string
          example: Apa itu Fullstack?
        video:
          type: string
          example: https://overcooked-weight.org
        order_index:
          type: integer
          example: 1
        course_chapter_id:
          type: string
          example: 3062d67c-e17a-46e5-9bcb-8c31045d8a74
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
    CourseMaterialWithStatus:
      type: object
      properties:
        id:
          type: string
          example: a34858de-4585-47f0-892c-3660ad3cc032
        name:
          type: string
          example: Apa itu Fullstack?
        video:
          type: string
          example: https://overcooked-weight.org
        order_index:
          type: integer
          example: 1
        course_chapter_id:
          type: string
          example: 3062d67c-e17a-46e5-9bcb-8c31045d8a74
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        course_material_status:
          type: object
          $ref: '#/components/schemas/CourseMaterialStatus'
    CourseMaterialStatus:
      type: object
      properties:
        id:
          type: string
          example: a34858de-4585-47f0-892c-3660ad3cc032
        completed:
          type: boolean
          example: true
        user_id:
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        course_material_id:
          type: string
          example: a34858de-4585-47f0-892c-3660ad3cc032
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
    CourseCategory:
      type: object
      properties:
        id:
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Ronald
        image:
          type: string
          example: https://random-site.com/random-image.png
        created_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00.000Z'
    Statistic:
      type: object
      properties:
        total_users:
          type: integer
          example: 24
        active_courses:
          type: integer
          example: 24
        premium_courses:
          type: integer
          example: 24
    Payments:
      type: object
      properties:
        id:
          type: string
          example: 16e6834c-c6db-4ba9-a720-2223d0b4a5e4
        status:
          example: PENDING
          enum:
            - PENDING
            - WAITING_VERIFICATION
            - COMPLETED
        payment_method:
          example: BANK_TRANSFER
          enum:
            - CREDIT_CARD
            - BANK_TRANSFER
        paid_at:
          type: string
          example: '2023-12-12T14:05:02.542Z'
        user_id:
          type: string
          example: 68a58152-8b12-449f-9eae-ec3485941bac
        course_id:
          type: string
          example: 5db0a017-6041-4d9a-8f44-5fca03d5378a
        expired_at:
          type: string
          example: '2023-12-13T14:04:41.177Z'
        created_at:
          type: string
          example: '2023-12-12T14:04:41.182Z'
        updated_at:
          type: string
          example: '2023-12-12T14:05:02.545Z'
        user:
          $ref: '#/components/schemas/User'
        course:
          $ref: '#/components/schemas/Course'
    PaymentBody:
      type: object
      properties:
        course_id:
          type: string
          example: '14b3347c-bc8a-4cee-b2fd-b41764c3db10'
    NewPayment:
      type: object
      properties:
        status:
          example: PENDING
          enum:
            - PENDING
            - WAITING_VERIFICATION
            - COMPLETED
        id:
          type: string
          example: 'cfbbb797-6c59-493d-bc9d-8efc924e2739'
        user_id:
          type: string
          example: '68a58152-8b12-449f-9eae-ec3485941bac'
        course_id:
          type: string
          example: '14b3347c-bc8a-4cee-b2fd-b41764c3db10'
        expired_at:
          type: string
          example: '2023-12-13T17:08:25.116Z'
        created_at:
          type: string
          example: '2023-12-13T17:08:25.120Z'
        updated_at:
          type: string
          example: '2023-12-13T17:08:25.120Z'
    UpdatedPayment:
      type: object
      properties:
        id:
          type: string
          example: 'd8c70d3e-0e76-47be-8a93-7995d7eaeff7'
        status:
          example: COMPLETED
          enum:
            - PENDING
            - WAITING_VERIFICATION
            - COMPLETED
        paid_at:
          type: string
          example: '2023-12-13T07:16:48.209Z'
        user_id:
          type: string
          example: '68a58152-8b12-449f-9eae-ec3485941bac'
        course_id:
          type: string
          example: 'f3102f7e-9916-4ff8-a50c-60048f7b634c'
        expired_at:
          type: string
          example: '2023-12-13T17:08:25.116Z'
        created_at:
          type: string
          example: '2023-12-13T17:08:25.120Z'
        updated_at:
          type: string
          example: '2023-12-13T17:08:25.120Z'
    Body:
      type: object
      properties:
        name:
          type: string
          example: Web Development
        code:
          type: string
          example: ZQosLgGtzB
        price:
          type: integer
          example: 100000
        author:
          type: string
          example: Ronald
        image:
          type: string
          example: https://loremflickr.com/640/480/animals?lock=5129160257175552
        premium:
          type: boolean
          example: false
        telegram:
          type: string
          example: https://random-site.com/tele-group
        difficulty:
          type: string
          example: INTERMEDIATE
          enum:
            - BEGINNER
            - INTERMEDIATE
            - ADVANCED
        description:
          type: string
          example: This course will help you become a great programmer
        intro_video:
          type: string
          example: https://random-site.com/random-video.mkv
        onboarding_text:
          type: string
          example: This course will help you become a great programmer
        target_audience:
          type: array
          items:
            type: string
          example:
            - You want to become a great programmer
            - You want to become a great programmer
            - You want to become a great programmer
        course_category_id:
          type: string
          example: 3bc509a0-923c-419d-8bcd-3e269289dc8e
    Delete:
      type: object
      properties:
        message:
          type: string
          example: Course deleted successfully
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
    MissingCredentialsError:
      type: object
      properties:
        message:
          type: string
          example: Email and password are required
    InvalidCredentialsError:
      type: object
      properties:
        message:
          type: string
          example: Email and password must be a string
    PasswordIsNotMatchError:
      type: object
      properties:
        message:
          type: string
          example: Password is not match
    InternalServerError:
      type: object
      properties:
        message:
          type: string
          example: Internal server error
    ValidationError:
      properties:
        message:
          type: string
          example: Validation error
    AdminError:
      type: object
      properties:
        message:
          type: string
          example: Only admin is allowed for this endpoint
    MissingAuthorizationError:
      type: object
      properties:
        message:
          type: string
          example: Missing authorization header
    InvalidAuthorizationError:
      type: object
      properties:
        message:
          type: string
          example: Invalid authorization header
    CourseNotFoundError:
      type: object
      properties:
        message:
          type: string
          example: 'Error while getting course details: Course not found'
    CourseAlreadyEnrolledError:
      type: object
      properties:
        message:
          type: string
          example: 'User is already enrolled in this course'
    PaymentNotFound:
      type: object
      properties:
        message:
          type: string
          example: 'Error while getting payment details: Payment not found'
    PaymentMethodNotNull:
      type: object
      properties:
        message:
          type: string
          example: 'Payment method cannot be null'
    PaymentAlreadyCompleted:
      type: object
      properties:
        message:
          type: string
          example: 'This payment is already completed'
    PaymentExpired:
      type: object
      properties:
        message:
          type: string
          example: 'This course payment is already expired'
  responses:
    InvalidAuthorizationError:
      description: Invalid authorization header
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidAuthorizationError'
    MissingAuthorizationError:
      description: Missing authorization header
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MissingAuthorizationError'
    MissingCredentialsError:
      description: Email and password are required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MissingCredentialsError'
    InvalidCredentialsError:
      description: Email and password must be a string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidCredentialsError'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'
    AdminError:
      description: Only admin is allowed for this endpoint
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdminError'
    SuperAdminError:
      description: Only superadmin is allowed for this endpoint
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuperAdminError'
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    PasswordIsNotMatchError:
      description: Password is not match
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PasswordIsNotMatchError'
    CourseNotFoundError:
      description: Course not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CourseNotFoundError'
    CourseAlreadyEnrolledError:
      description: Course already enrolled by user before
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CourseAlreadyEnrolledError'
    PaymentNotFound:
      description: payment method cannot be null
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentNotFound'
    PaymentMethodNotNull:
      description: payment method cannot be null
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentMethodNotNull'
    PaymentAlreadyCompleted:
      description: Payment already completed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentAlreadyCompleted'
    PaymentExpired:
      description: Payment Expired
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentExpired'
  requestBodies:
    UserBody:
      description: User object that needs to be added
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CreatedUser'
              - type: object
                properties:
                  password:
                    type: string
                    example: password
  securitySchemes:
    token:
      type: apiKey
      name: Authorization
      in: header
      description: >-
        Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345".
